<?php
namespace App\Repository\Produit\Service;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ServiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ServiceRepository extends EntityRepository
{
public function myfindAll()
{
	$query = $this->createQueryBuilder('s')
	              ->leftJoin('s.evenements','e')
				  ->addSelect('e')
				  ->where('s.principal = 1')
				  ->andWhere('s.blog = 0')
	              ->orderBy('s.date','ASC')
                  ->getQuery();
	return $query->getResult();
}

public function topservice($id)
{
	$query = $this->createQueryBuilder('s')
	              ->leftJoin('s.evenements','e')
	              ->orderBy('s.date','ASC')
				  ->where('s.principal = 1')
				  ->setMaxResults($id)
                  ->getQuery();
	return $query->getResult();
}

public function findServiceScat($id)
{
	$query = $this->createQueryBuilder('s')
	              ->leftJoin('s.souscategorie','c')
				  ->addSelect('c')
				  ->where('s.themeforum = 1 AND c.id = :id')
				  ->orderBy('s.rang','ASC')
				  ->setParameter('id',$id)
                  ->getQuery();
	return $query->getResult();
}

public function findAllThemeForum()
{
	$query = $this->createQueryBuilder('s')
	              ->leftJoin('s.souscategorie','c')
				  ->addSelect('c')
				  ->where('s.themeforum = 1')
				  ->orderBy('s.rang','ASC')
                  ->getQuery();
	return $query->getResult();
}

public function listeformation($page,$nombreParPage)
{
	 // On déplace la vérification du numéro de page dans cette méthode
    if ($page < 1) {
    throw new \InvalidArgumentException('Page inexistant');
     }
    // La construction de la requête reste inchangée
    $query = $this->createQueryBuilder('s')
	              ->leftJoin('s.evenements', 'e')
				  ->addSelect('e')
				  ->where('s.principal = 1')
                  ->orderBy('s.rang', 'DESC')
                  ->getQuery();
    // On définit l'établissemnt à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'établissement à afficher
          ->setMaxResults($nombreParPage);
    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
return new Paginator($query);
}

public function findBlog($page,$nombreParPage)
{
     // On déplace la vérification du numéro de page dans cette méthode
    if ($page < 1) {
    throw new \InvalidArgumentException('Page inexistant');
     }
    // La construction de la requête reste inchangée
    $query = $this->createQueryBuilder('s')
	              ->leftJoin('s.evenements', 'e')
				  ->addSelect('e')
				  ->where('s.blog = 1')
                  ->orderBy('s.date', 'DESC')
                  ->getQuery();
    // On définit l'établissemnt à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'établissement à afficher
          ->setMaxResults($nombreParPage);
    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
return new Paginator($query);
}
public function myAllBlog()
{
	$query = $this->createQueryBuilder('s')
	              ->leftJoin('s.evenements','e')
				  ->addSelect('e')
				  ->andWhere('s.blog = 1')
	              ->orderBy('s.date','DESC')
                  ->getQuery();
	return $query->getResult();
}
public function getSelectList()
{
	 $qb = $this->createQueryBuilder('s')
                  ->where('s.equipe = 1')
                  ->orderBy('s.nom','ASC');
	return $qb;
}
public function getSelectListCompetition()
{
	 $qb = $this->createQueryBuilder('s')
                  ->where('s.competition = 1')
                  ->orderBy('s.nom','ASC');
	return $qb;
}
}
