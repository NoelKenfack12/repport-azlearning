<?php

namespace App\Repository\Produit\Produit;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ProduitRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProduitRepository extends EntityRepository
{
	
public function myFindBy($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
				  ->where('s.id = :id AND p.valide = 1')
				  ->setParameter('id',$id)
	              ->orderBy('p.rang','ASC')
                  ->getQuery();
	return $query->getResult();
}

public function listeproduituser($id, $page, $nombreParPage)
{
	// On déplace la vérification du numéro de page dans cette méthode
    if ($page < 1){
    throw new \InvalidArgumentException('Page inexistant');
    }
    $query = $this->createQueryBuilder('p')
				  ->leftJoin('p.souscategorie','s')
				  ->leftJoin('s.categorie','c')
				  ->addSelect('s')
				  ->addSelect('c')
				  ->where('c.id = :id')
				  ->andWhere('p.valide = 1')
				  ->setParameter('id',$id)
	              ->orderBy('p.rang','ASC')
                  ->getQuery();
    // On définit l'établissemnt à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'établissement à afficher
          ->setMaxResults($nombreParPage);
    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
return new Paginator($query);
}

public function findProduitValide($page,$nombreParPage)
{
	if($page < 1){
    throw new \InvalidArgumentException('Page inexistant');
    }
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.user', 'u')
				  ->addSelect('u')
				  ->where('p.valide = 1')
				  ->orderBy('p.date','DESC')
                  ->getQuery();
	// On définit l'établissemnt à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'établissement à afficher
          ->setMaxResults($nombreParPage);
    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
return new Paginator($query);
}

public function listeProduitInval($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
				  ->where('s.id = :id AND  p.valide = 0')
				  ->setParameter('id',$id)
	              ->orderBy('p.date','DESC')
                  ->getQuery();
	return $query->getResult();
}

public function listeProduitPlusLike($nbre,$liste=array())
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
				  ->where('p.valide = 1 AND p.id NOT IN (:liste)')
				  ->setParameter('liste',$liste)
	              ->orderBy('p.nblike','DESC')
				  ->setMaxResults($nbre)
                  ->getQuery();
	return $query->getResult();
}

public function listeProduitPlusVisite($nbre,$liste=array())
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
				  ->where('p.valide = 1 AND p.id NOT IN (:liste)')
				  ->setParameter('liste',$liste)
	              ->orderBy('p.nbvue','DESC')
				  ->setMaxResults($nbre)
                  ->getQuery();
	return $query->getResult();
}

public function listeProduitVal($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
				  ->where('s.id = :id AND  p.valide = 1')
				  ->setParameter('id',$id)
	              ->orderBy('p.date','DESC')
                  ->getQuery();
	return $query->getResult();
}

public function listeProduitArchive($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
				  ->where('s.id = :id AND p.active = 0 AND p.valide = 1')
				  ->setParameter('id',$id)
	              ->orderBy('p.date','DESC')
                  ->getQuery();
	return $query->getResult();
}

public function findBestProduit($nbre)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
	              ->orderBy('p.nblike','DESC')
				  ->setMaxResults($nbre)
                  ->getQuery();
	return $query->getResult();
}

public function orderCroissant()
{
		$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
	              ->orderBy('p.nblike','ASC')
                  ->getQuery();
	return $query->getResult();
}

public function topProduit($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
	              ->orderBy('p.nbvente','DESC')
				  ->setMaxResults($id)
                  ->getQuery();
	return $query->getResult();
}

public function topLike($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
				  ->addSelect('s')
	              ->orderBy('p.nblike','DESC')
				  ->setMaxResults($id)
                  ->getQuery();
	return $query->getResult();
}

public function findProduit($donnee,$tail=5000)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','c')
	              ->leftJoin('c.categorie','g')
	              ->leftJoin('p.user','u')
				  ->addSelect('c')
				  ->addSelect('g')
				  ->where('p.titre LIKE :n AND p.valide = 1')
				  ->orWhere('p.description LIKE :n AND p.valide = 1')
				  ->orWhere('p.objectif LIKE :n AND p.valide = 1')
				  ->orWhere('p.prerequis LIKE :n AND p.valide = 1')
				  ->orWhere('c.nom LIKE :n AND p.valide = 1')
				  ->orWhere('c.contenu LIKE :n AND p.valide = 1')
				  ->orWhere('g.nom LIKE :n AND p.valide = 1')
				  ->orWhere('u.nom LIKE :n AND p.valide = 1')
				  ->setParameter('n','%'.$donnee.'%')
                  ->orderBy('p.titre', 'ASC')
                  ->setMaxResults($tail)
                  ->getQuery();
return $query->getResult();
}

public function findVilleCategorie($idville, $idscat, $prixmin, $prixmax, $keyword)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','c')
	              ->leftJoin('p.quartier','q')
	              ->leftJoin('q.ville','v')
				  ->addSelect('c')
				  ->addSelect('q')
				  ->addSelect('v')
				  ->where('v.id = :idville AND c.id = :idscat AND p.newprise >= :prixmin AND p.newprise <= :prixmax AND p.nom LIKE :n')
				  ->orWhere('v.id = :idville AND c.id = :idscat AND p.newprise >= :prixmin AND p.newprise <= :prixmax AND p.description LIKE :n')
				  ->setParameter('idville',$idville)
				  ->setParameter('idscat',$idscat)
				  ->setParameter('prixmin',$prixmin)
				  ->setParameter('prixmax',$prixmax)
				  ->setParameter('n','%'.$keyword.'%')
                  ->orderBy('p.nom', 'ASC')
                  ->getQuery();
return $query->getResult();
}

public function findProduitCategorie($idscat, $prixmin, $prixmax, $keyword)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','c')
	              ->leftJoin('p.quartier','q')
	              ->leftJoin('q.ville','v')
				  ->addSelect('c')
				  ->addSelect('q')
				  ->addSelect('v')
				  ->where('c.id = :idscat AND p.newprise >= :prixmin AND p.newprise <= :prixmax AND p.nom LIKE :n')
				  ->orWhere('c.id = :idscat AND p.newprise >= :prixmin AND p.newprise <= :prixmax AND p.description LIKE :n')
				  ->setParameter('idscat',$idscat)
				  ->setParameter('prixmin',$prixmin)
				  ->setParameter('prixmax',$prixmax)
				  ->setParameter('n','%'.$keyword.'%')
                  ->orderBy('p.nom', 'ASC')
                  ->getQuery();
return $query->getResult();
}

public function searchProduitVille($idville, $prixmin, $prixmax, $keyword)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','c')
	              ->leftJoin('p.quartier','q')
	              ->leftJoin('q.ville','v')
				  ->addSelect('c')
				  ->addSelect('q')
				  ->addSelect('v')
				  ->where('v.id = :idville AND p.newprise >= :prixmin AND p.newprise <= :prixmax AND p.nom LIKE :n')
				  ->orWhere('v.id = :idville AND p.newprise >= :prixmin AND p.newprise <= :prixmax AND p.description LIKE :n')
				  ->setParameter('idville',$idville)
				  ->setParameter('prixmin',$prixmin)
				  ->setParameter('prixmax',$prixmax)
				  ->setParameter('n','%'.$keyword.'%')
                  ->orderBy('p.nom', 'ASC')
                  ->getQuery();
return $query->getResult();
}

public function findProduitVille($idcat, $idv)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.souscategorie','s')
	              ->leftJoin('p.quartier','q')
	              ->leftJoin('q.ville','v')
				  ->addSelect('s')
				  ->addSelect('q')
				  ->addSelect('v')
	              ->where('s.id = :scat AND v.id = :idv AND p.active = 1 AND p.valide = 1')
				  ->setParameter('scat',$idcat)
				  ->setParameter('idv',$idv)
                  ->getQuery();
	return $query->getResult();
}
}
