<?php
namespace App\Repository\Produit\Produit;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * SouscategorieRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SouscategorieRepository extends EntityRepository
{
public function getSelectList()
{
    $qb = $this->createQueryBuilder('s')
	              ->leftJoin('s.categorie', 'c')
				  ->addSelect('c')
                  ->orderBy('s.nom','ASC');
	return $qb;
}

public function topsouscategorie($id)
{
	$query = $this->createQueryBuilder('c')
	              ->orderBy('c.rang','DESC')
				  ->setMaxResults($id)
                  ->getQuery();
	return $query->getResult();
}

public function scatcategorie($id)
{
	$query = $this->createQueryBuilder('s')
				  ->leftJoin('s.categorie','c')
				  ->where('c.id = :id')
				  ->setParameter('id',$id)
	              ->orderBy('s.rang','ASC')
                  ->getQuery();
	return $query->getResult();
}

public function souscategorieforum()
{
	$query = $this->createQueryBuilder('c')
				  ->leftJoin('c.services','s')
				  ->where('s.themeforum = 1')
	              ->orderBy('c.rang','DESC')
                  ->getQuery();
	return $query->getResult();
}

public function findNbProduitCat($id)
{
	$query = $this->_em->createQuery('SELECT sum(s.nbproduit) as val FROM ProduitProduitBundle:Souscategorie s, ProduitProduitBundle:Categorie c WHERE s.categorie = c AND c.id = :id')
					   ->setParameter('id',$id);
    $resultats = $query->getScalarResult();
    return $resultats;
}

public function findScatcourantCat($id,$page,$nombreParPage)
{
	// On déplace la vérification du numéro de page dans cette méthode
    if ($page < 1) {
    throw new \InvalidArgumentException('Page inexistant');
    }
    // La construction de la requête reste inchangée
    $query = $this->createQueryBuilder('s')
				  ->leftJoin('s.categorie','c')
				  ->addSelect('c')
				  ->where('c.id = :id')
				  ->setParameter('id',$id)
				  ->orderBy('s.date','DESC')
                  ->getQuery();
    // On définit l'établissemnt à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'établissement à afficher
          ->setMaxResults($nombreParPage);
    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
return new Paginator($query);
}

public function findValideScatcourantCat($id,$page,$nombreParPage)
{
	// On déplace la vérification du numéro de page dans cette méthode
    if ($page < 1) {
    throw new \InvalidArgumentException('Page inexistant');
    }
    // La construction de la requête reste inchangée
    $query = $this->createQueryBuilder('s')
				  ->leftJoin('s.categorie','c')
				  ->addSelect('c')
				  ->where('c.id = :id')
				  ->andWhere('s.date <= :mydate')
				  ->setParameter('id', $id)
				  ->setParameter('mydate', new \Datetime(date('Y').'-'.date('m').'-'.date('d').' 23:59:59'))
				  ->orderBy('s.date','DESC')
                  ->getQuery();
    // On définit l'établissemnt à partir duquel commencer la liste
    $query->setFirstResult(($page-1) * $nombreParPage)
    // Ainsi que le nombre d'établissement à afficher
          ->setMaxResults($nombreParPage);
    // Enfin, on retourne l'objet Paginator correspondant à la requête construite
return new Paginator($query);
}
}
