<?php
namespace App\Repository\Produit\Produit;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * PanierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PanierRepository extends EntityRepository
{
public function getPanierScategorie($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.souscategorie','s')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('s')
				  ->where('s.id = :id')
				  ->andWhere('p.payer = 1')
				  ->setParameter('id',$id)
                  ->getQuery();
	return $query->getResult();
}
public function getPanierProduitUser($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.user','u')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('u')
				  ->where('u.id = :id')
				  ->andWhere('p.payer = 1')
				  ->setParameter('id',$id)
				  ->orderBy('p.date','DESC')
                  ->getQuery();
	return $query->getResult();
}
public function getPanierScategorieGagnant($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.souscategorie','s')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('s')
				  ->where('s.id = :id')
				  ->andWhere('p.payer = 1 AND p.nbgagner >= 3')
				  ->setParameter('id',$id)
	              ->orderBy('p.nbticket','DESC')
                  ->getQuery();
	return $query->getResult();
}
public function getPanierScategorieGagnantQuartre($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.souscategorie','s')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('s')
				  ->where('s.id = :id')
				  ->andWhere('p.payer = 1 AND p.nbgagner >= 4')
				  ->setParameter('id',$id)
	              ->orderBy('p.nbticket','DESC')
                  ->getQuery();
	return $query->getResult();
}
public function getPanierScategorieGagnantCinq($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.souscategorie','s')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('s')
				  ->where('s.id = :id')
				  ->andWhere('p.payer = 1 AND p.nbgagner >= 5')
				  ->setParameter('id',$id)
	              ->orderBy('p.nbticket','DESC')
                  ->getQuery();
	return $query->getResult();
}
public function getPanierTroisGagnant($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.souscategorie','s')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('s')
				  ->where('s.id = :id')
				  ->andWhere('p.payer = 1 AND p.nbgagner = 3')
				  ->setParameter('id',$id)
	              ->orderBy('p.nbticket','DESC')
                  ->getQuery();
	return $query->getResult();
}
public function getPanierQuartreGagnant($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.souscategorie','s')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('s')
				  ->where('s.id = :id')
				  ->andWhere('p.payer = 1 AND p.nbgagner = 4')
				  ->setParameter('id',$id)
	              ->orderBy('p.nbticket','DESC')
                  ->getQuery();
	return $query->getResult();
}
public function getPanierCinqGagnant($id)
{
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.produitpaniers','r')
	              ->leftJoin('r.produit','o')
	              ->leftJoin('o.souscategorie','s')
				  ->addSelect('r')
				  ->addSelect('o')
				  ->addSelect('s')
				  ->where('s.id = :id')
				  ->andWhere('p.payer = 1 AND p.nbgagner = 5')
				  ->setParameter('id',$id)
	              ->orderBy('p.nbticket','DESC')
                  ->getQuery();
	return $query->getResult();
}

public function listepanierinvalide($page, $nombreParPage)
{
		if($page < 1){
			throw new \InvalidArgumentException('Page inexistant');
		}
		$query = $this->createQueryBuilder('p')
					  ->leftJoin('p.user', 'u')
					  ->addSelect('u')
					  ->where('p.valide = 1 AND p.livrer = 0')
					  ->orderBy('p.date','DESC')
					  ->getQuery();
		// On définit l'établissemnt à partir duquel commencer la liste
		$query->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'établissement à afficher
			  ->setMaxResults($nombreParPage);
		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
	return new Paginator($query);
}

public function searchpanierinvalide($page, $nombreParPage, $search)
{
		if($page < 1){
			throw new \InvalidArgumentException('Page inexistant');
		}
		$query = $this->createQueryBuilder('p')
					  ->leftJoin('p.user', 'u')
					  ->addSelect('u')
					  ->orWhere('p.valide = 1 AND p.livrer = 0 AND u.nom LIKE :n')
					  ->orWhere('p.valide = 1 AND p.livrer = 0 AND u.prenom LIKE :n')
					  ->orWhere('p.valide = 1 AND p.livrer = 0 AND u.username LIKE :n')
					  ->orWhere('p.valide = 1 AND p.livrer = 0 AND u.username LIKE :n')
					  ->setParameter('n','%'.$search.'%')
					  ->orderBy('p.date','DESC')
					  ->getQuery();
		// On définit l'établissemnt à partir duquel commencer la liste
		$query->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'établissement à afficher
			  ->setMaxResults($nombreParPage);
		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
	return new Paginator($query);
}

public function searchpanierlivrer($page, $nombreParPage, $search)
{
		if($page < 1){
			throw new \InvalidArgumentException('Page inexistant');
		}
		$query = $this->createQueryBuilder('p')
					  ->leftJoin('p.user', 'u')
					  ->addSelect('u')
					  ->orWhere('p.valide = 1 AND p.livrer = 1 AND u.nom LIKE :n')
					  ->orWhere('p.valide = 1 AND p.livrer = 1 AND u.prenom LIKE :n')
					  ->orWhere('p.valide = 1 AND p.livrer = 1 AND u.username LIKE :n')
					  ->orWhere('p.valide = 1 AND p.livrer = 1 AND u.username LIKE :n')
					  ->setParameter('n','%'.$search.'%')
					  ->orderBy('p.date','DESC')
					  ->getQuery();
		// On définit l'établissemnt à partir duquel commencer la liste
		$query->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'établissement à afficher
			  ->setMaxResults($nombreParPage);
		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
	return new Paginator($query);
}

public function listepanierlivrer($page, $nombreParPage)
{
		if($page < 1){
			throw new \InvalidArgumentException('Page inexistant');
		}
		$query = $this->createQueryBuilder('p')
					  ->leftJoin('p.user', 'u')
					  ->addSelect('u')
					  ->where('p.valide = 1 AND p.livrer = 1')
					  ->orderBy('p.date','DESC')
					  ->getQuery();
		// On définit l'établissemnt à partir duquel commencer la liste
		$query->setFirstResult(($page-1) * $nombreParPage)
		// Ainsi que le nombre d'établissement à afficher
			  ->setMaxResults($nombreParPage);
		// Enfin, on retourne l'objet Paginator correspondant à la requête construite
	return new Paginator($query);
}

public function findAllCommandeSection($page = 1, $nombreParPage = 1000, $debut='2019-01-01', $fin='2020-01-01')
{
	// On déplace la vérification du numéro de page dans cette méthode
    if($page < 1){
		throw new \InvalidArgumentException('Page inexistant');
    }
	$query = $this->createQueryBuilder('p')
	              ->leftJoin('p.user','u')
	              ->leftJoin('p.produitpaniers','pp')
				  ->addSelect('u')
				  ->addSelect('pp')
				  ->where('p.payer = 1 AND p.date >= :debut AND p.date <= :fin')  //Pour les commandes clients 
				  ->orWhere('p.payer = 1 AND p.date >= :debut AND p.date <= :fin') //Pour les commandes des boutiques Mobiles
				  ->setParameter('debut', new \Datetime($debut.' 00:00:00'))
				  ->setParameter('fin',   new \Datetime($fin.' 23:59:59'))
	              ->orderBy('p.date','DESC')
                  ->getQuery();
	$query->setFirstResult(($page-1) * $nombreParPage)
          ->setMaxResults($nombreParPage);
return new Paginator($query);
}
}
